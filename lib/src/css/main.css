html,
body {
    width: 100%;
    height: 100%;
    white-space: nowrap;
}


/**
   * default text style
   */

[data-wtype="Text"] {
    width: auto;
    white-space: normal;
    word-wrap: break-word;
}


/**
   * Widgets that can have padding and/or border
   */

[data-wtype="SizedBox"],
[data-wtype="Container"] {
    box-sizing: border-box;
}


/**
   * widgets without scrolls
   * i.e widget's inner content will not be scrollable
   */

[data-wtype="SizedBox"],
[data-wtype="Container"],
[data-wtype="Stack"],
[data-wtype="Align"],
[data-wtype="Route"],
[data-wtype="Positioned"] {
    overflow: hidden;
}


/**
   * widgets that should take as much space as possible
   */

[data-wtype="Flex"],
[data-wtype="Flexible"],
[data-wtype="Align"],
[data-wtype="Stack"],
[data-wtype="Container"],
[data-wtype="Overlay"],
[data-wtype="OverlayEntry"],

/* 
 below widgets are not stylable. only way to
 limit their bounds is to wrap them in a stylable
 widget such as container.
*/

[data-wtype="Route"],
[data-wtype="Navigator"],

/* 
 target is not a widget it refers to the div where app is mounted
*/

[data-wtype="Target"] {
    width: 100%;
    height: 100%;
}


/**
   * widgets with block display
   */

[data-wtype="Align"],
[data-wtype="Stack"],
[data-wtype="Overlay"],
[data-wtype="Navigator"],
[data-wtype="Overlay"],
[data-wtype="Container"],
[data-wtype="Target"] {
    display: block;
}


/**
   * widgets with infline-block display
   */

[data-wtype="SizedBox"] {
    display: inline-block;
}


/**
   * widgets with flex display
   */

[data-wtype="Flex"] {
    display: flex;
}


/**
   * widgets without styles
   */

[data-wtype="MarkUp"],
[data-wtype="StatefulWidget"],
[data-wtype="StatelessWidget"],
[data-wtype="GestureDetector"] {
    /* 
    
    It's important to have each element present inside DOM because
    Rad uses DOM as Element tree. Since these widgets shouldn't have
    any impact on styles, we are using display: contents here.

    Note: contents is not widely supported by the browsers. If Browser 
    support ever becomes a problem, we can introduce a Element tree to 
    fix this problem. 
    */
    display: contents;
}


/**
   * widgets that has relative position
   * this allow child widgets to absolutly position themselves
   */

[data-wtype="Navigator"],
[data-wtype="Align"],
[data-wtype="Overlay"],
[data-wtype="Stack"] {
    position: relative;
}


/**
   * widgets with absolute position
   */

[data-wtype="Route"],
[data-wtype="OverlayEntry"],

/* align childs */

[data-wtype="Align"]>*,

/* stack childs */

[data-wtype="Stack"]>* {
    position: absolute;
}


/**
   * system
   */

.rad-hidden {
    display: none!important;
    visibility: hidden!important;
}


/**
   * widgets having pointer cursor
   */

[data-wtype="GestureDetector"] {
    cursor: pointer;
}